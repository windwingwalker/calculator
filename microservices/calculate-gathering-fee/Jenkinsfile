pipeline{
  agent any
  environment {
    AWS_ACCESS_KEY_ID          = credentials('aws_access_key_id')
    AWS_SECRET_ACCESS_KEY      = credentials('aws_secret_access_key')
    AWS_ACCOUNT_ID             = credentials('aws_account_id')

    PROJECT_NAME               = "calculator"
    RESOURCE_NAME              = "gathering-fee"
    MS_NAME                    = "calculate-gathering-fee"
    HTTP_METHOD                = "POST"

    TF_VAR_project_name        = "${PROJECT_NAME}"
    TF_VAR_resource_name       = "${RESOURCE_NAME}"
    TF_VAR_ms_name             = "${MS_NAME}"
    TF_VAR_http_method         = "${HTTP_METHOD}"
    TF_VAR_image_tag           = "${env.BUILD_NUMBER}"
  }
  tools {
    terraform 'TerraformDefault'
  }
  options {
    ansiColor('xterm')
  }
  stages{
    stage('Gather Files'){
      steps{
        sh "rsync -av model/ microservices/${TF_VAR_ms_name}/model"
      }
    }
    stage('Build Image'){
      steps{
        sh 'ls -al'
        dir("microservices/${MS_NAME}/"){
          script{
            image = docker.build("${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${MS_NAME}:${TF_VAR_image_tag}")
          }
        }
      }
    }
    stage('Push Image'){
      steps{
        script{
          docker.withRegistry("https://${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com", "ecr:us-east-1:aws_credentials") {
            image.push()
          }
        }
      }
    }
    stage('Deploy'){
      steps{
        dir("microservices/${MS_NAME}/iac"){
          sh 'terraform init -input=false'
          sh 'terraform plan -out=tfplan -input=false'
          sh 'terraform apply -input=false -auto-approve tfplan'
        }
      }
    }
  }
}